from __future__ import annotations
import html
import logging
import asyncio
from typing import Optional, Dict, Any

import aiohttp

log = logging.getLogger(__name__)

class TelegramNotifier:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª–µ –ø—Ä–æ —Å—Ç—Ä–∏–º.
    –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç—Ä–∏–º–∞ —É–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.
    –°–æ–∑–¥–∞—ë—Ç –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ö–ê–ñ–î–û–ì–û –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–∞ (–ø–æ started_at).
    –¢—Ä–µ–±—É–µ—Ç—Å—è: –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """

    def __init__(self, bot_token: str, chat_id: str, parse_mode: str = "HTML", disable_preview: bool = True) -> None:
        self.base = f"https://api.telegram.org/bot{bot_token}"
        self.chat_id = chat_id
        self.parse_mode = parse_mode
        self.disable_preview = disable_preview

        self._session: Optional[aiohttp.ClientSession] = None
        self._message_id: Optional[int] = None
        self._last_payload: Optional[str] = None
        self._stream_tag: Optional[str] = None  # —Ö—Ä–∞–Ω–∏—Ç started_at —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        self._lock = asyncio.Lock()  # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å—Ç/—ç–¥–∏—Ç/–¥–µ–ª–∏—Ç

    async def start(self) -> None:
        if not self._session:
            self._session = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15))

    async def stop(self) -> None:
        if self._session:
            await self._session.close()
            self._session = None

    def _fmt(self, info: Dict[str, Any]) -> str:
        title = html.escape(info.get("title") or "")
        game = html.escape(info.get("game_name") or "Unknown")
        viewers = int(info.get("viewer_count") or 0)
        url = html.escape(info.get("url") or "#")

        lines = [
            "üé• <b>–°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è!</b>",
            f"üéÆ –ò–≥—Ä–∞: <b>{game}</b>",
            f"üëÄ –ó—Ä–∏—Ç–µ–ª–µ–π: <b>{viewers}</b>",
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: <i>{title}</i>",
            "",
            f"üëâ <a href=\"{url}\">–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Twitch</a>",
        ]
        return "\n".join(lines)

    async def _send(self, text: str) -> None:
        assert self._session is not None
        payload = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": self.parse_mode,
            "disable_web_page_preview": self.disable_preview,
        }
        async with self._session.post(f"{self.base}/sendMessage", json=payload) as resp:
            data = await resp.json()
            if resp.status != 200 or not data.get("ok"):
                log.warning("sendMessage failed: %s %s", resp.status, data)
                return
            self._message_id = data["result"]["message_id"]
            self._last_payload = text

    async def _edit(self, text: str) -> None:
        assert self._session is not None
        if self._message_id is None:
            await self._send(text)
            return
        if text == self._last_payload:
            return
        payload = {
            "chat_id": self.chat_id,
            "message_id": self._message_id,
            "text": text,
            "parse_mode": self.parse_mode,
            "disable_web_page_preview": self.disable_preview,
        }
        async with self._session.post(f"{self.base}/editMessageText", json=payload) as resp:
            data = await resp.json()
            if resp.status != 200 or not data.get("ok"):
                # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ
                log.warning("editMessageText failed, will repost: %s %s", resp.status, data)
                self._message_id = None
                self._last_payload = None
                await self._send(text)
                return
            self._last_payload = text

    async def _delete(self) -> None:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –°–†–ê–ó–£, —á—Ç–æ–±—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç
        mid = self._message_id
        self._message_id = None
        self._last_payload = None

        if mid is None or self._session is None:
            return
        payload = {
            "chat_id": self.chat_id,
            "message_id": mid,
        }
        async with self._session.post(f"{self.base}/deleteMessage", json=payload) as resp:
            try:
                data = await resp.json()
            except Exception:
                data = {}
            if resp.status != 200 or not data.get("ok", True):
                log.warning("deleteMessage failed: %s %s", resp.status, data)

    async def on_stream_update(self, info: Optional[Dict[str, Any]]) -> None:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö: –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω/—Å–º–µ–Ω–∞ –∏–≥—Ä—ã/–∑–∞–≥–æ–ª–æ–≤–∫–∞/–∑—Ä–∏—Ç–µ–ª–µ–π.
        - info = None (–æ—Ñ—Ñ–ª–∞–π–Ω): —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–≥ —Å–µ—Å—Å–∏–∏.
        - info != None (–æ–Ω–ª–∞–π–Ω): –µ—Å–ª–∏ started_at –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        await self.start()
        async with self._lock:
            if info is None:
                await self._delete()
                self._stream_tag = None
                return

            # –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º? —Å—Ä–∞–≤–Ω–∏–º started_at
            tag = (info.get("started_at") or "").strip()
            if tag and tag != self._stream_tag:
                # –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Üí –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–∑–¥–∞—ë–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
                self._stream_tag = tag
                self._message_id = None
                self._last_payload = None

            text = self._fmt(info)
            # –ø—Ä–∏ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            if self._message_id is None:
                await self._send(text)
            else:
                await self._edit(text)
